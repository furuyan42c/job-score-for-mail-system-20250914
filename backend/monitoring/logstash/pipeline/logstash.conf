# Logstash configuration for job matching system logs
input {
  # File input for application logs
  file {
    path => "/var/log/app/*.log"
    start_position => "beginning"
    type => "application"
    tags => ["application", "job-matching"]
  }

  # Beats input for container logs
  beats {
    port => 5044
    type => "container"
  }

  # Syslog input for system logs
  syslog {
    port => 5000
    type => "syslog"
  }
}

filter {
  # Parse timestamp from logs
  date {
    match => [ "timestamp", "yyyy-MM-dd HH:mm:ss" ]
  }

  # Parse JSON logs
  if [type] == "application" {
    json {
      source => "message"
    }

    # Extract batch processing metrics
    if [logger] == "batch_processor" {
      grok {
        match => {
          "message" => "Batch processing completed: processed=%{NUMBER:users_processed:int} errors=%{NUMBER:error_count:int} duration=%{NUMBER:duration:float}s"
        }
        add_tag => ["batch_metrics"]
      }
    }

    # Parse error logs
    if [level] == "ERROR" {
      grok {
        match => {
          "message" => "%{GREEDYDATA:error_message}"
        }
        add_tag => ["error"]
      }
    }

    # Parse database query logs
    if [logger] == "sqlalchemy.engine" {
      grok {
        match => {
          "message" => "SELECT.*FROM %{WORD:table_name}"
        }
        add_tag => ["database_query"]
      }
    }
  }

  # Parse container logs
  if [type] == "container" {
    # Parse Docker container logs
    json {
      source => "message"
    }

    # Add container information
    mutate {
      add_field => { "container_name" => "%{[docker][container][name]}" }
      add_field => { "container_image" => "%{[docker][container][image]}" }
    }
  }

  # Security log parsing
  if [message] =~ /failed.*login|authentication.*failed|unauthorized/ {
    mutate {
      add_tag => ["security", "authentication_failure"]
    }
  }

  # Performance monitoring
  if [message] =~ /slow.*query|timeout|performance/ {
    mutate {
      add_tag => ["performance", "slow_query"]
    }
  }

  # Clean up fields
  mutate {
    remove_field => ["@version", "host", "path"]
  }
}

output {
  # Output to Elasticsearch
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "job-matching-%{+YYYY.MM.dd}"
    template_name => "job-matching"
    template => "/usr/share/logstash/templates/job-matching.json"
    template_overwrite => true
  }

  # Output metrics to file for Prometheus
  if "batch_metrics" in [tags] {
    file {
      path => "/var/log/app/metrics.log"
      codec => line {
        format => "batch_users_processed_total %{users_processed} %{@timestamp}"
      }
    }
  }

  # Output errors to separate index
  if "error" in [tags] {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "job-matching-errors-%{+YYYY.MM.dd}"
    }
  }

  # Debug output for development
  if [type] == "application" and [level] == "DEBUG" {
    stdout {
      codec => rubydebug
    }
  }
}