{
  "message_type": "TASK_ASSIGN",
  "timestamp": "2025-08-25T11:00:45.000Z",
  "from": "agent-orchestrator",
  "to": "thorough-todo-executor",
  "task_assignment": {
    "task_id": "TASK-3.3",
    "title": "Geographic Matching Implementation",
    "description": "Implement geographic matching system for calculating location compatibility between users and jobs",
    "file_path": "src/core/matching/location-matcher.ts",
    "priority": "HIGH",
    "estimated_duration_min": 20,
    "dependencies": {
      "completed": ["TASK-3.1"],
      "can_parallel_with": ["TASK-3.2"],
      "required_files": [
        "src/data/models/user.model.ts",
        "src/data/models/job.model.ts"
      ]
    },
    "requirements": {
      "functional": [
        "Calculate distance-based matching scores: Same city=100, Adjacent=80, Same prefecture=60, Other=20",
        "Support batch processing for user-job location matching",
        "Handle missing or invalid location data gracefully",
        "Implement prefecture and city code validation",
        "Calculate commute distance estimations",
        "Support location preference weighting"
      ],
      "technical": [
        "TypeScript implementation with strict typing",
        "Integration with existing city_master and prefecture_master data",
        "Efficient lookup algorithms for large datasets",
        "Comprehensive error handling",
        "JSDoc documentation for all public methods",
        "Memory-efficient data structures"
      ],
      "performance": [
        "Sub-millisecond matching per user-job pair",
        "Support for 10,000 users Ã— 100,000 jobs efficiently",
        "Optimized lookup tables for city/prefecture data",
        "Batch processing capabilities"
      ]
    },
    "acceptance_criteria": [
      "LocationMatcher class with scoring methods",
      "calculateLocationScore() for single user-job pair",
      "batchCalculateLocationScores() for bulk processing",
      "City adjacency detection logic",
      "Prefecture boundary validation",
      "Comprehensive unit tests with edge cases",
      "Integration tests with real location data",
      "Performance benchmarks for batch operations"
    ],
    "context": {
      "project_phase": "Phase 3 - User Matching System",
      "parallel_task": "TASK-3.2 (Time Decay Model)",
      "critical_path": true,
      "integration_points": ["user-profiler.ts", "matching engine"],
      "location_scoring_matrix": {
        "same_city": 100,
        "adjacent_city": 80,
        "same_prefecture": 60,
        "other_prefecture": 20
      }
    }
  }
}
