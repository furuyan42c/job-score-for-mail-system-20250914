{
  "message_type": "TASK_ASSIGN",
  "timestamp": "2025-08-25T12:00:00.000Z",
  "from": "agent-orchestrator",
  "to": "thorough-todo-executor",
  "task_assignment": {
    "task_id": "TASK-3.4",
    "title": "Collaborative Filtering Implementation",
    "description": "Implement collaborative filtering system for finding similar users and generating recommendations based on user behavior similarities",
    "file_path": "src/core/matching/collaborative-filter.ts",
    "priority": "HIGH",
    "estimated_duration_min": 35,
    "dependencies": {
      "completed": ["TASK-3.1", "TASK-3.2", "TASK-3.3"],
      "required_files": [
        "src/core/matching/user-profiler.ts",
        "src/core/matching/time-decay-model.ts",
        "src/data/repositories/user.repository.ts"
      ]
    },
    "requirements": {
      "functional": [
        "Implement cosine similarity calculation for user behavior vectors",
        "Find TOP N similar users (default: 10) for each user",
        "Generate collaborative recommendations from similar users' preferences",
        "Support time-weighted collaborative filtering using time decay model",
        "Handle sparse data and cold start problems gracefully",
        "Implement user-user and item-item collaborative filtering modes",
        "Provide confidence scores for collaborative recommendations"
      ],
      "technical": [
        "TypeScript implementation with strict typing and comprehensive interfaces",
        "Memory-efficient similarity matrix calculations",
        "Integration with existing user-profiler and time-decay components",
        "Caching system for similarity calculations",
        "Batch processing support for large user populations",
        "Comprehensive error handling and logging"
      ],
      "performance": [
        "Calculate similarities for 10,000 users efficiently",
        "Support real-time similarity lookups with sub-100ms response",
        "Memory-optimized sparse vector operations",
        "Scalable architecture for user base growth"
      ]
    },
    "acceptance_criteria": [
      "CollaborativeFilter class with configurable similarity metrics",
      "calculateUserSimilarity() method with cosine similarity",
      "findSimilarUsers() method returning TOP N matches",
      "generateCollaborativeRecommendations() for job suggestions",
      "Integration with time decay model for recency weighting",
      "Comprehensive unit tests with edge cases and performance tests",
      "Cold start handling for new users with limited data",
      "Documentation and usage examples"
    ],
    "context": {
      "project_phase": "Phase 3 - User Matching System",
      "critical_path": true,
      "integration_points": ["user-profiler.ts", "time-decay-model.ts", "matching engine"],
      "similarity_algorithms": ["cosine_similarity", "pearson_correlation", "jaccard_index"],
      "performance_target": "1-hour batch processing for 10K users"
    }
  }
}
