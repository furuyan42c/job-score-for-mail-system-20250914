apiVersion: v1
kind: ConfigMap
metadata:
  name: backend-config
  labels:
    app.kubernetes.io/name: mail-score-backend
    app.kubernetes.io/component: api
data:
  APP_ENV: "production"
  LOG_LEVEL: "INFO"
  PROMETHEUS_METRICS: "true"
  WORKERS: "4"
  MAX_WORKERS: "8"
  TIMEOUT: "300"
  KEEPALIVE: "2"
---
apiVersion: v1
kind: Secret
metadata:
  name: backend-secret
  labels:
    app.kubernetes.io/name: mail-score-backend
    app.kubernetes.io/component: api
type: Opaque
data:
  DATABASE_URL: cG9zdGdyZXNxbDovL3Bvc3RncmVzOnBhc3N3b3JkQHBvc3RncmVzLXNlcnZpY2U6NTQzMi9tYWlsX3Njb3Jl  # base64 encoded
  REDIS_URL: cmVkaXM6Ly86cmVkaXNwYXNzd29yZEByZWRpcy1zZXJ2aWNlOjYzNzkvMA==  # base64 encoded
  SENTRY_DSN: ""  # Add your Sentry DSN
  SECRET_KEY: c3VwZXItc2VjcmV0LWtleS1mb3ItandzLXNpZ25pbmc=  # base64 encoded
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mail-score-backend
  labels:
    app.kubernetes.io/name: mail-score-backend
    app.kubernetes.io/component: api
    app.kubernetes.io/version: "1.0.0"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: mail-score-backend
      app.kubernetes.io/component: api
  template:
    metadata:
      labels:
        app.kubernetes.io/name: mail-score-backend
        app.kubernetes.io/component: api
        app.kubernetes.io/version: "1.0.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: backend
        image: mail-score-backend:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          name: http
          protocol: TCP
        env:
        - name: APP_ENV
          valueFrom:
            configMapKeyRef:
              name: backend-config
              key: APP_ENV
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: backend-config
              key: LOG_LEVEL
        - name: PROMETHEUS_METRICS
          valueFrom:
            configMapKeyRef:
              name: backend-config
              key: PROMETHEUS_METRICS
        - name: WORKERS
          valueFrom:
            configMapKeyRef:
              name: backend-config
              key: WORKERS
        - name: MAX_WORKERS
          valueFrom:
            configMapKeyRef:
              name: backend-config
              key: MAX_WORKERS
        - name: TIMEOUT
          valueFrom:
            configMapKeyRef:
              name: backend-config
              key: TIMEOUT
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: backend-secret
              key: DATABASE_URL
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: backend-secret
              key: REDIS_URL
        - name: SENTRY_DSN
          valueFrom:
            secretKeyRef:
              name: backend-secret
              key: SENTRY_DSN
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: backend-secret
              key: SECRET_KEY
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 12
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          runAsGroup: 1000
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: logs
          mountPath: /app/logs
        - name: uploads
          mountPath: /app/uploads
      volumes:
      - name: tmp
        emptyDir: {}
      - name: logs
        emptyDir: {}
      - name: uploads
        emptyDir: {}
      initContainers:
      - name: wait-for-postgres
        image: postgres:15-alpine
        command: ['sh', '-c', 'until pg_isready -h postgres-service -p 5432; do echo waiting for postgres; sleep 2; done;']
      - name: wait-for-redis
        image: redis:7-alpine
        command: ['sh', '-c', 'until redis-cli -h redis-service -p 6379 ping; do echo waiting for redis; sleep 2; done;']
---
apiVersion: v1
kind: Service
metadata:
  name: backend-service
  labels:
    app.kubernetes.io/name: mail-score-backend
    app.kubernetes.io/component: api
spec:
  type: ClusterIP
  ports:
  - port: 8000
    targetPort: http
    protocol: TCP
    name: http
  selector:
    app.kubernetes.io/name: mail-score-backend
    app.kubernetes.io/component: api
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: backend-hpa
  labels:
    app.kubernetes.io/name: mail-score-backend
    app.kubernetes.io/component: api
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: mail-score-backend
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 30