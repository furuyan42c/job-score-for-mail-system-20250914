# Claude Code 自動化システム設定ファイル（例）
# このファイルをconfig.envにコピーして設定をカスタマイズしてください
# cp config.env.example config.env

# ================================================================
# 基本設定
# ================================================================

# tmuxセッション名（起動時に作成するセッション名）
SESSION="cc"

# 監視対象ペイン（SESSION:window.pane 形式）
TARGET="${SESSION}:1.0"

# Claude Code起動コマンド
START_CMD="codex /run agent"

# ログディレクトリ（絶対パス推奨）
LOG_DIR="$HOME/cc_logs"

# タスクファイルパス（完了検知に使用）
TASKS_PATH="$HOME/work/tasks.md"

# カスタムcontinueプロンプトファイル
CONTINUE_PROMPT_FILE="$(dirname "$0")/continue_prompt.txt"

# ================================================================
# 監視パラメータ
# ================================================================

# アイドル検知時間（秒）
# この時間出力変化がないと/continueを送信
IDLE_SECS=600

# /continue後のクールダウン時間（秒）
# 連続送信を防ぐための待機時間
COOLDOWN_SECS=45

# 自動保存間隔（分、0で無効）
# 定期的にチェックポイントを作成
AUTO_SAVE_MINS=15

# コンテキスト使用率閾値（%、0で無効）
# この値を超えると自動再起動
CONTEXT_THRESHOLD=70

# セッション最大時間（分）
# この時間経過後に自動再起動
MAX_SESSION_MIN=45

# 再起動最小間隔（分）
# 連続再起動を防ぐための最小間隔
RESTART_MIN_GAP=2

# ================================================================
# コンテキストプローブ設定
# ================================================================

# プローブ送信間隔（分、0で無効）
# ログにコンテキスト%が出ない環境で使用
PROBE_CTX_MINS=10

# プローブタイムアウト（秒）
# コンテキスト情報の取得待機時間
PROBE_TIMEOUT_SEC=12

# ================================================================
# エラーハンドリング
# ================================================================

# エラー検知ウィンドウ（秒）
# この時間内でのエラー発生回数を監視
ERR_WINDOW_SECS=300

# エラー閾値（回数）
# ウィンドウ内でこの回数以上エラーが発生すると対応実行
ERR_THRESHOLD=3

# 各HTTPステータスコードでの動作
# skip: タスクスキップ、retry: リトライ、reset: 安全再起動
ON_ERR_400_ACTION="skip"
ON_ERR_401_ACTION="reset"
ON_ERR_403_ACTION="skip"
ON_ERR_404_ACTION="skip"
ON_ERR_429_ACTION="retry"
ON_ERR_5XX_ACTION="retry"

# リトライ時に送信するコマンド
RETRY_CMD="/retry"

# ================================================================
# プロジェクト固有設定例
# ================================================================

# 例1: mail-scoreプロジェクト用設定
# SESSION="mail-score"
# TARGET="mail-score:1.0"
# TASKS_PATH="$HOME/Project/new.mail.score/specs/002-think-hard-ultrathink/tasks.md"
# CONTEXT_THRESHOLD=75
# AUTO_SAVE_MINS=10

# 例2: 短時間開発用設定
# IDLE_SECS=300
# AUTO_SAVE_MINS=5
# MAX_SESSION_MIN=30
# CONTEXT_THRESHOLD=80

# 例3: 長時間実行用設定
# IDLE_SECS=900
# AUTO_SAVE_MINS=20
# MAX_SESSION_MIN=60
# CONTEXT_THRESHOLD=65

# 例4: 高負荷環境用設定
# ERR_THRESHOLD=5
# CONTEXT_THRESHOLD=60
# RESTART_MIN_GAP=3

# ================================================================
# 開発・デバッグ用設定
# ================================================================

# デバッグモード（1で有効）
# DEBUG=1

# 詳細ログ出力（1で有効）
# VERBOSE=1

# ドライランモード（1で有効、実際のコマンド送信なし）
# DRY_RUN=1

# ================================================================
# 環境別設定例
# ================================================================

# 本番環境
if [[ "${ENVIRONMENT:-}" == "production" ]]; then
    AUTO_SAVE_MINS=15
    CONTEXT_THRESHOLD=70
    MAX_SESSION_MIN=45
    ERR_THRESHOLD=3
fi

# 開発環境
if [[ "${ENVIRONMENT:-}" == "development" ]]; then
    AUTO_SAVE_MINS=5
    CONTEXT_THRESHOLD=80
    MAX_SESSION_MIN=30
    ERR_THRESHOLD=2
fi

# テスト環境
if [[ "${ENVIRONMENT:-}" == "test" ]]; then
    AUTO_SAVE_MINS=0  # 無効
    CONTEXT_THRESHOLD=90
    MAX_SESSION_MIN=15
    ERR_THRESHOLD=1
fi